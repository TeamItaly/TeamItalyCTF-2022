

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_91 = Integer(91); _sage_const_57 = Integer(57)
load("castryck_decru_shortcut.sage")

def generate_distortion_map(E):
    if E.a_invariants() != (_sage_const_0 ,_sage_const_6 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ):
        raise NotImplementedError
    return E.isogeny(E.lift_x(ZZ(_sage_const_1 )), codomain=E)

def generate_torsion_points(E, a, b):
    def get_l_torsion_basis(E, l):
        n = (p+_sage_const_1 ) // l
        print(f"{n = }")
        return (n*G for G in E.gens())

    P2, Q2 = get_l_torsion_basis(E, _sage_const_2 **a)
    P3, Q3 = get_l_torsion_basis(E, _sage_const_3 **b)

    return P2, Q2, P3, Q3

def check_torsion_points(E, a, b, P2, Q2, P3, Q3):
    # Make sure Torsion points are
    # generated correctly
    infty = E(_sage_const_0 )
    assert _sage_const_2 **(a-_sage_const_1 )*P2 != infty
    assert _sage_const_3 **(b-_sage_const_1 )*P3 != infty
    assert P2.weil_pairing(Q2, _sage_const_2 **a)**(_sage_const_2 **(a-_sage_const_1 )) != _sage_const_1 
    assert P3.weil_pairing(Q3, _sage_const_3 **b)**(_sage_const_3 **(b-_sage_const_1 )) != _sage_const_1 

def gen_bob_keypair(E_start, a, b, P2, Q2, P3, Q3):
    # generate challenge key
    bobs_key = randint(_sage_const_0 ,_sage_const_3 **b)
    _b = randint(_sage_const_0 , _sage_const_2 **a)
    while gcd(_b, _sage_const_2 ) != _sage_const_1 :
        _b = randint(_sage_const_0 , _sage_const_2 **a)
    print(f"{_b = }")
    K = P3 + bobs_key*Q3
    phi = E_start.isogeny(K, algorithm="factored")
    EB = phi.codomain()
    EB.set_order((p+_sage_const_1 )**_sage_const_2 , num_checks=_sage_const_0 )

    print(f"{phi(P2) = }")
    print(f"{phi(Q2) = }")

    PB, QB = _b*phi(P2), _b*phi(Q2)

    return bobs_key, EB, PB, QB



# Setup SIDH params
lA,a, lB,b = _sage_const_2 ,_sage_const_91 , _sage_const_3 ,_sage_const_57 
p = lA**a * lB**b - _sage_const_1 
Fp2 = GF(p**_sage_const_2 , modulus=x**_sage_const_2 +_sage_const_1 , names=('i',)); (i,) = Fp2._first_ngens(1)
R = PolynomialRing(Fp2, names=('x',)); (x,) = R._first_ngens(1)
E_start = EllipticCurve(Fp2, [_sage_const_0 ,_sage_const_6 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ])
two_i = generate_distortion_map(E_start)
P2, Q2, P3, Q3 = generate_torsion_points(E_start, a, b)

bob_private_key, EB, PB, QB = gen_bob_keypair(E_start, a, b, P2, Q2, P3, Q3)
print(f"{bob_private_key = }")
x = PB.weil_pairing(QB, _sage_const_2 **a)
base = P2.weil_pairing(Q2, _sage_const_2 **a)
sol = log(x, base)
assert base**sol == x
sol = Zmod(_sage_const_2 **a)(_sage_const_3 **b)**-_sage_const_1 *sol
print(f"{sol = }")
possible_bs = sol.nth_root(_sage_const_2 ,all=True)
print(possible_bs)

for hope in possible_bs:
    print(f"{hope = }")
    origin_PB = int(Zmod(_sage_const_2 **a)(hope)**-_sage_const_1 )*PB
    origin_QB = int(Zmod(_sage_const_2 **a)(hope)**-_sage_const_1 )*QB
    try:
        CastryckDecruAttack(E_start, P2, Q2, EB, origin_PB, origin_QB, two_i, num_cores=_sage_const_1 )
    except:
        print("Nope")

